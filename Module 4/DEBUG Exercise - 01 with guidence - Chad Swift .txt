Question: You have been tasked with reviewing and updating this program. What steps would you take to identify any issues in the code?
Your Response:

I will check keywords for mistakes, pay attention to spelling errors. I will make sure codeblocks are properly indented, make sure there are no missing variables or inconsistencies within the variables themselves. I will check naming conventions and make sure the type matches the variable being presented. 

Question: What actions could the developer have taken to minimize the number of errors?
Your Response:

The developer could perform simple desk-checking in order to make sure the code did not have any errors before moving on to the next steps. In actual programming, the developer could use an IDE in order to catch these types of coding mistakes. 

Debbugging Exercise:

// This pseudocode is intended to determine whether students have
// passed or failed a course; student needs to average 60 or
// more on two tests. 
start
   Declarations
      num firstTest
      num secondTest
      num average
      num passingGrade = 60
   OUTPUT "Enter first score or 0 to quit "
   INPUT firstTest
   WHILE firstTest <> 0
      OUTPUT "Enter second score "
      INPUT secondTest
      average = (firstTest + secondTest) / 2
      OUTPUT "Average is ", average
      if average >= passingGrade
         OUTPUT "Pass"
      else
         OUTPUT "Fail"
      endif
      OUTPUT "Enter first score or 0 to quit "
      INPUT firstTest
   endwhile
stop

You have been diligently testing and debugging your flows and pseudocode programs throughout the course. However, this is the first assignment focused on debugging. Here are some helpful hints to guide you.

The declarations are always a good start to review.  should be carefully reviewed to ensure that all variables used are correctly spelled throughout the code.

The conditional statement within the WHILE loop, which checks if 'firstTest' is not equal to 0, dictates that the code block will be continuously executed until the variable 'firstTest' is no longer equal to 0. So lets check.

Just prior to the WHILE loop, there is an OUTPUT prompting the user to "Enter first score or 0 to quit." However, it appears that there is a missing INPUT statement to store the user's response in the appropriate variable. 

A correction should be made by adding an INPUT statement: 'firstTest = INPUT("Enter first score or 0 to quit")'.

We are debugging but we are also testing, so lets check our WHILE statement.  We just collected the firstTest from the user with the INPUT statement, lets assume the user entered in 100.  Our WHILE statement is firstTest not equal to 0, our user put in 100, so firstTest is not equal to 0, so we are ok to move to the next statement.
 
We are currently in the process of debugging and testing our code. Let's review our WHILE statement. We have obtained the value of firstTest from the user using the INPUT statement, with the assumption that the user entered 100. Our WHILE statement checks if firstTest is not equal to 0. Since the user INPUT 100, the condition is met and we can proceed to the next statement.

Let's enhance the readability of the pseudocode by modifying the "not equal" to symbols "<>". The revised line of code will be "WHILE firstTest <> 0".

The subsequent line of code involves formatting the OUTPUT statement. It is important to keep in mind that pseudocode can have both INPUT and OUTPUT for clarity.

We will compute the average by using the formula: average = (firstTest + secondTest) / 2. It is essential to include parentheses around the addition of firstTest and secondTest to ensure accurate calculation before division by 2.

Output looks good, OUTPUT "Average is ", average

Let's review the IF - ELSE - ENDIF logic. The average has been calculated accurately and we have established that a passing grade is 60. For example, if we INPUT 100 the first time and 80 the second time, our average should be 90. Since the average is greater than or equal to 60, the OUTPUT will be "Pass". If it is not, the OUTPUT will be "Fail". Our IF statement has been successfully tested, so we can proceed to the next step.

if average >= PASSING then
   OUTPUT "Pass"
else
   OUTPUT "Fail"
endif

The next step is OUTPUT "Enter first score or 0 to quit ".  since the developer is splitting the INPUT and OUTPUT in two different lines, we need to have an INPUT statement, add INPUT firstTest.
If the user entered 0 we will exit our WHILE statement because our statement for the WHILE is "WHILE firstTest <> to 0".  Our last step is to stop so we are done.

You have successfully achieved the following milestones:

- Formulating and implementing your testing plan
- Methodically executing the test by reviewing each line of code
- Thoroughly verifying the accuracy of calculations and solutions

Well done on effectively strategizing, planning, and debugging the program. Your efforts have been commendable.
